// Etape 1:  Transformation linéaire de l'équation des  quartiques en forme ternaire
P2<x,y,z> := ProjectiveSpace(Rationals(),2);

Ci := [les des 100milles courbes];
D:=[];
for i in [1..#Ci] do
F := Ci[i];
for a1,a2,a3,a4,a5,a6,a7,a8,a9 in [-2..2] do
A := Matrix(Rationals(),3,3,[a1,a2,a3,a4,a5,a6,a7,a8,a9]);
if not IsSingular(A) then
H := Evaluate(F,[a1*x+a2*y+a3*z,a4*x+a5*y+a6*z,a7*x+a8*y+a9*z]);
if Evaluate(H,[-x,y,z]) eq H and Evaluate(H,[x,-y,z]) eq H and Evaluate(H,[x,y,-z]) eq H then
Appen(~D, H);
print D;
break a1; break a2; break a3; break a4; break a5; break a6; break a7; break a8; break a9;
end if;
end if;
end for;
end for;
// Etape2: Calcul des points rationnels pour les quartiques de Ciani
// telecharger la liste D donnée par l'Etape 1.
P2<x,y,z> := ProjectiveSpace(Rationals(),2);
for H in D do
C := Curve(P2,[H]);
phi1 := iso<C -> C | [-x,y,z],[-x,y,z]> ;
phi2 := iso<C -> C | [x,-y,z],[x,-y,z]> ; 
phi3 := iso<C -> C | [x,y,-z],[x,y,-z]> ;

G1 := AutomorphismGroup(C,[phi1]); G2 := AutomorphismGroup(C,[phi2]); G3 := AutomorphismGroup(C,[phi3]);

Q1,m1 := CurveQuotient(G1);
Q2,m2 := CurveQuotient(G2);
Q3,m3 := CurveQuotient(G3);
assert Genus(Q1) ge 1;
assert Genus(Q2) ge 1;
assert Genus(Q3) ge 1;

if RankBound(Jacobian(Q1))*RankBound(Jacobian(Q2))*RankBound(Jacobian(Q3)) ge 1 then 
print "The ranks are too large";
else 
    print "One of the quotients has rank 0";
    print "The rank of the Jacobian is ",RankBound(Jacobian(Q1))+RankBound(Jacobian(Q2))+RankBound(Jacobian(Q3));
if RankBound(Jacobian(Q1)) eq 0 then
    Q := Q1; m := m1;
    else if RankBound(Jacobian(Q2)) eq 0 then
    	 Q := Q2; m := m2;
    	else Q := Q3; m := m3;
end if;
end if;
    print Q;
	assert #Points(Q : Bound:=1000) eq #TorsionSubgroup(Jacobian(Q));
    for i in [1..#Points(Q: Bound:=100)] do
    RationalPoints(Difference(Pullback(m,Points(Q: Bound:=1000)[i]), BaseScheme(m)));
end for;
end if;
end for;